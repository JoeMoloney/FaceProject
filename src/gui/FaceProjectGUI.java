/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
/**
 *
 * @author K00243015
 */
public class FaceProjectGUI extends javax.swing.JFrame
{
    //Variables declaration
    int figureID = 1, colorID = 1, rC, gC, bC, sAngle, eAngle;
    /**
     * Creates new form FaceProjectGUI
     */
    public FaceProjectGUI()
    {
        initComponents();
        repaint(); //Paint defaults on load
    }
    
    //Timer initialization
    Timer t1 = new Timer(5, new ActionListener() 
    {
        //Action per tick
        @Override
        public void actionPerformed(ActionEvent ae) 
        {
            sAngle++;
            eAngle++;
            if (sAngle == 360) //if 360 degrees
            {
                sAngle = 0; //reset to 0
            }
            else if (eAngle == 360) //if 360 degrees
            {
                eAngle = 0; //reset to 0
            }
            repaint();
        }
    });

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        expressionGroup = new javax.swing.ButtonGroup();
        colorGroup = new javax.swing.ButtonGroup();
        drawingPanel = new javax.swing.JPanel();
        expressionPanel = new javax.swing.JPanel();
        happyButton = new javax.swing.JRadioButton();
        sadButton = new javax.swing.JRadioButton();
        indifferentButton = new javax.swing.JRadioButton();
        colorPanel = new javax.swing.JPanel();
        redButton = new javax.swing.JRadioButton();
        greenButton = new javax.swing.JRadioButton();
        blueButton = new javax.swing.JRadioButton();
        sliderPanel = new javax.swing.JPanel();
        redSlider = new javax.swing.JSlider();
        greenSlider = new javax.swing.JSlider();
        blueSlider = new javax.swing.JSlider();
        colorRedLabel = new javax.swing.JLabel();
        colorGreenLabel = new javax.swing.JLabel();
        colorBlueLabel = new javax.swing.JLabel();
        animateCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Face Project");

        drawingPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        expressionPanel.setBackground(new java.awt.Color(153, 153, 153));
        expressionPanel.setLayout(new java.awt.GridLayout(1, 3));

        expressionGroup.add(happyButton);
        happyButton.setSelected(true);
        happyButton.setText("Happy");
        happyButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        happyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        happyButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        happyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        happyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                happyButtonActionPerformed(evt);
            }
        });
        expressionPanel.add(happyButton);

        expressionGroup.add(sadButton);
        sadButton.setText("Sad");
        sadButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sadButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        sadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sadButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sadButtonActionPerformed(evt);
            }
        });
        expressionPanel.add(sadButton);

        expressionGroup.add(indifferentButton);
        indifferentButton.setText("Indifferent");
        indifferentButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        indifferentButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        indifferentButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        indifferentButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        indifferentButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                indifferentButtonActionPerformed(evt);
            }
        });
        expressionPanel.add(indifferentButton);

        colorPanel.setBackground(new java.awt.Color(153, 153, 153));
        colorPanel.setLayout(new java.awt.GridLayout(1, 3));

        colorGroup.add(redButton);
        redButton.setSelected(true);
        redButton.setText("Red");
        redButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        redButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        redButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                redButtonActionPerformed(evt);
            }
        });
        colorPanel.add(redButton);

        colorGroup.add(greenButton);
        greenButton.setText("Green");
        greenButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        greenButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        greenButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        greenButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        greenButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                greenButtonActionPerformed(evt);
            }
        });
        colorPanel.add(greenButton);

        colorGroup.add(blueButton);
        blueButton.setText("Blue");
        blueButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        blueButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        blueButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        blueButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        blueButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                blueButtonActionPerformed(evt);
            }
        });
        colorPanel.add(blueButton);

        sliderPanel.setBackground(new java.awt.Color(153, 153, 153));

        redSlider.setMaximum(255);
        redSlider.setValue(255);
        redSlider.setDoubleBuffered(true);
        redSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                redSliderMouseDragged(evt);
            }
        });

        greenSlider.setMaximum(255);
        greenSlider.setValue(0);
        greenSlider.setDoubleBuffered(true);
        greenSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                greenSliderMouseDragged(evt);
            }
        });

        blueSlider.setMaximum(255);
        blueSlider.setValue(0);
        blueSlider.setDoubleBuffered(true);
        blueSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                blueSliderMouseDragged(evt);
            }
        });

        colorRedLabel.setText("Red:");

        colorGreenLabel.setText("Green:");

        colorBlueLabel.setText("Blue:");

        animateCheckBox.setText("Animate Smiley");
        animateCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                animateCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sliderPanelLayout = new javax.swing.GroupLayout(sliderPanel);
        sliderPanel.setLayout(sliderPanelLayout);
        sliderPanelLayout.setHorizontalGroup(
            sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sliderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greenSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(blueSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sliderPanelLayout.createSequentialGroup()
                        .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colorRedLabel)
                            .addComponent(colorGreenLabel)
                            .addComponent(colorBlueLabel))
                        .addGap(0, 335, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sliderPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(animateCheckBox)))
                .addContainerGap())
        );
        sliderPanelLayout.setVerticalGroup(
            sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sliderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(animateCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colorRedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorGreenLabel)
                .addGap(4, 4, 4)
                .addComponent(greenSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(colorBlueLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(expressionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(colorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sliderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(drawingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expressionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void happyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_happyButtonActionPerformed
        figureID = 1; //Select figure 1
        sAngle = 0; //set arc angle
        eAngle = -180; //set arc finish angle
        animateCheckBox.setSelected(false); //reset checkbox for animation
        animateCheckBox.setEnabled(true); //re-enable checkbox for animation
        animateCheckBoxActionPerformed(evt); //Start-Stop the timer
        repaint();
    }//GEN-LAST:event_happyButtonActionPerformed

    private void redButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redButtonActionPerformed
        colorID = 1; 
        redSlider.setValue(255);        
        greenSlider.setValue(0);
        blueSlider.setValue(0);
        repaint();
    }//GEN-LAST:event_redButtonActionPerformed

    private void sadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sadButtonActionPerformed
        figureID = 2; //Select figure 2
        sAngle = 0; //set arc angle
        eAngle = 180; //set arc finish angle
        animateCheckBox.setSelected(false); //reset checkbox for animation
        animateCheckBox.setEnabled(true); //re-enable checkbox for animation
        animateCheckBoxActionPerformed(evt); //Start-Stop the timer
        repaint();
    }//GEN-LAST:event_sadButtonActionPerformed

    private void indifferentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indifferentButtonActionPerformed
        figureID = 3; //Select figure 3
        animateCheckBox.setSelected(false); //un-check animation checkbox
        animateCheckBox.setEnabled(false); //disable animation checkbox
        animateCheckBoxActionPerformed(evt); //Start-Stop the timer
        repaint();
    }//GEN-LAST:event_indifferentButtonActionPerformed

    private void greenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenButtonActionPerformed
        colorID = 2;
        redSlider.setValue(0);        
        greenSlider.setValue(255);
        blueSlider.setValue(0);
        repaint();
    }//GEN-LAST:event_greenButtonActionPerformed

    private void blueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueButtonActionPerformed
        colorID = 3;
        redSlider.setValue(0);        
        greenSlider.setValue(0);
        blueSlider.setValue(255);
        repaint();
    }//GEN-LAST:event_blueButtonActionPerformed

    private void redSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redSliderMouseDragged
        rC = redSlider.getValue();
        repaint();
    }//GEN-LAST:event_redSliderMouseDragged

    private void greenSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenSliderMouseDragged
        gC = greenSlider.getValue();
        repaint();
    }//GEN-LAST:event_greenSliderMouseDragged

    private void blueSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blueSliderMouseDragged
        bC = blueSlider.getValue();
        repaint();
    }//GEN-LAST:event_blueSliderMouseDragged

    private void animateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animateCheckBoxActionPerformed
        if (animateCheckBox.isSelected()) 
        {
            t1.start();
        }
        else
        {
            t1.stop();
        }
    }//GEN-LAST:event_animateCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(FaceProjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(FaceProjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(FaceProjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(FaceProjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new FaceProjectGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox animateCheckBox;
    private javax.swing.JRadioButton blueButton;
    private javax.swing.JSlider blueSlider;
    private javax.swing.JLabel colorBlueLabel;
    private javax.swing.JLabel colorGreenLabel;
    private javax.swing.ButtonGroup colorGroup;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JLabel colorRedLabel;
    private javax.swing.JPanel drawingPanel;
    private javax.swing.ButtonGroup expressionGroup;
    private javax.swing.JPanel expressionPanel;
    private javax.swing.JRadioButton greenButton;
    private javax.swing.JSlider greenSlider;
    private javax.swing.JRadioButton happyButton;
    private javax.swing.JRadioButton indifferentButton;
    private javax.swing.JRadioButton redButton;
    private javax.swing.JSlider redSlider;
    private javax.swing.JRadioButton sadButton;
    private javax.swing.JPanel sliderPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void paint(Graphics g)
    {
        super.paint(g);
        Color rgbColor = new Color(redSlider.getValue(), greenSlider.getValue(), blueSlider.getValue());
        Graphics2D g1 = (Graphics2D)drawingPanel.getGraphics();
        g1.setStroke(new BasicStroke(5));
        switch(colorID)
        {
            case 1:
            {
            g1.setColor(Color.red);
            g1.setColor(rgbColor);
                break;
            }
            case 2:
            {
            g1.setColor(Color.green);
            g1.setColor(rgbColor);
                break;
            }
            case 3:
            {
            g1.setColor(Color.blue);
            g1.setColor(rgbColor);
                break;
            }
            default:
            {
                break;
            }
        }
        
        switch(figureID)
        {
            case 1:
            {
                //Eyes 
                    //Oval: [x, y, width, height]
                g1.drawOval(150, 10, 20, 40);
                g1.drawOval(200, 10, 20, 40);
                
                //Nose
                    //Polyline: [x array, y array, noOfPoints]
                    int xA[] = new int[]{175, 200, 175};
                    int yA[] = new int[]{60, 100, 100};
                g1.drawPolyline(xA, yA, xA.length);
                
                //Mouth 
                    //Arc: [x, y, width, height, startAngle, arcAngle]
                g1.drawArc(150, 100, 75, 50, sAngle, eAngle);
                break;
            }
            case 2:
            {
                //Eyes 
                    //Oval: [x, y, width, height]
                g1.drawOval(150, 10, 20, 40);
                g1.drawOval(200, 10, 20, 40);
                
                //Nose
                    //Polyline: [x array, y array, noOfPoints]
                    int xA[] = new int[]{175, 200, 175};
                    int yA[] = new int[]{60, 100, 100};
                g1.drawPolyline(xA, yA, xA.length);
                
                //Mouth 
                    //Arc: [x, y, width, height, startAngle, arcAngle]
                g1.drawArc(150, 125, 75, 50, sAngle, eAngle);
                break;
            }
            case 3:
            {
                //Eyes 
                    //Line: [x1, y1, x2, y2]
                g1.drawLine(140, 30, 165, 30);
                g1.drawLine(200, 30, 225, 30);
                
                //Nose
                    //Polyline: [x array, y array, noOfPoints]
                    int xA[] = new int[]{175, 200, 175};
                    int yA[] = new int[]{60, 100, 100};
                g1.drawPolyline(xA, yA, xA.length);
                
                //Mouth 
                    //Line: [x1, y1, x2, y2]
                g1.drawLine(150, 125, 225, 125);
                break;
            }
            case 4:
            {
                //Eyes 
                    //Oval: [x, y, width, height]
                g1.drawOval(150, 10, 20, 40);
                g1.drawOval(200, 10, 20, 40);
                
                //Nose
                    //Polyline: [x array, y array, noOfPoints]
                    int xA[] = new int[]{175, 200, 175};
                    int yA[] = new int[]{60, 100, 100};
                g1.drawPolyline(xA, yA, xA.length);
                
                //Mouth 
                    //Arc: [x, y, width, height, startAngle, arcAngle]
                g1.drawArc(150, 125, 75, 50, sAngle, eAngle);
                break;
            }
            default:
            {
                break;
            }
        }
    }
}
